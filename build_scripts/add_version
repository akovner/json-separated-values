#!/usr/bin/env python

import os
from subprocess import check_output, call
from packaging.version import parse, Version

git_describe = check_output(["git", "describe", '--match', 'v[0-9]*']).strip().decode('utf-8')
ver_str = git_describe.split('-')[0][1:]
ver = parse(ver_str)
if not isinstance(ver, Version):
    raise ValueError('version string from git does not parse according to pep440')
git_hash = check_output(['git', 'rev-parse', 'HEAD']).strip().decode('utf-8')

here = os.path.abspath(os.path.dirname(__file__))
root = os.path.abspath(os.path.join(here, os.pardir))
about = {}
version_path = os.path.join(root, 'jsv', '__version__.py')
with open(version_path, 'r') as f:
    exec(f.read(), about)

var_order = [
    '__title__',
    '__description__',
    '__url__',
    '__version__',
    '__commit_hash__',
    '__author__',
    '__author_email__',
    '__license__',
    '__copyright__'
]

about['__version__'] = ver.public
about['__commit_hash__'] = git_hash

with open(version_path, 'w') as f:
    for var in var_order:
        print("{0} = '{1}'".format(var, about[var]), file=f)
